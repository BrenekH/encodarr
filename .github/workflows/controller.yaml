name: Controller CI/CD

on: [push, pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ['ubuntu-latest']
        go-version: ['1.16']

    defaults:
      run:
        working-directory: ./controller

    steps:
      - uses: actions/checkout@v2

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Run tests
        env:
          # We aim to be CGO free to improve compatibility. Disabling it in the CI should help with that goal.
          CGO_ENABLED: 0
        run: go test ./...

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ['ubuntu-latest']
        go-version: ['1.16']
        go-os-arch: ['linux/amd64', 'linux/arm64', 'linux/arm', 'windows/amd64', 'darwin/amd64']

    defaults:
      run:
        working-directory: ./controller

    steps:
      - uses: actions/checkout@v2

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Generate Env Vars
        env:
          IFS: "/"
        run: |
          read -ra SPLITITEMS <<< "${{ matrix.go-os-arch }}"
          echo "COMP_GOOS=$(SPLITITEMS[0])" >> $GITHUB_ENV
          echo "COMP_GOARCH=$(SPLITITEMS[1])" >> $GITHUB_ENV

      - name: Set suffix (windows)
        if: contains(matrix.go-os-arch, 'windows')
        run: echo "EXEC_SUFFIX=.exe" >> $GITHUB_ENV

      - name: Set suffix (literally everything else)
        if: "!contains(matrix.go-os-arch, 'windows')"
        run: echo "EXEC_SUFFIX=$("")" >> $GITHUB_ENV

      - name: Build executable
        env:
          # We aim to be CGO free to improve compatibility. Disabling it in the CI should help with enforcing that goal.
          CGO_ENABLED: 0
          GOARM: 7
          GOOS: ${{ env.COMP_GOOS }}
          GOARCH: ${{ env.COMP_GOARCH }}
        run: go build -o encodarr-controller-${{ env.COMP_GOOS }}-${{ env.COMP_GOARCH }}${{ env.EXEC_SUFFIX }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: encodarr-controller-${{ env.COMP_GOOS }}-${{ env.COMP_GOARCH }}${{ env.EXEC_SUFFIX }}
          path: encodarr-controller-${{ env.COMP_GOOS }}-${{ env.COMP_GOARCH }}${{ env.EXEC_SUFFIX }}

  deploy-container-images-tags:
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
      - uses: actions/checkout@v2

      - name: Set PREREL environment variable
        env:
          TAG: ${{ github.ref }}
        run: echo "PREREL=$(if [[ $TAG =~ "alpha" ]] || [[ $TAG =~ "beta" ]] || [[ $TAG =~ "rc" ]]; then echo "true"; else echo "false"; fi;)" >> $GITHUB_ENV

      - name: Generate Docker Metadata
        id: meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: |
            brenekh/encodarr-controller
            ghcr.io/brenekh/encodarr-controller
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container images/tags
        uses: docker/build-push-action@v2
        with:
          context: ./controller
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
